name: Deploy

on:
  pull_request:
    types:
      - closed   # 풀 리퀘스트가 “병합(closed)”되었을 때 트리거

jobs:
  deploy-dev:
    # dev 브랜치로 머지되었을 때만 실행
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'dev'
    name: Deploy to AWS Dev EC2
    runs-on: ubuntu-latest

    steps:
      - name: SSH to Dev Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_AWS_HOST }}
          username: ${{ secrets.DEV_AWS_USER }}
          key: ${{ secrets.DEV_AWS_SSH_KEY }}
          script: |
            set -e
            cd ~/backend
            
            # ── FocusZ 가상환경만 쓰도록 고정 ─────────────────────────
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            pyenv activate FocusZ      # ← 핵심: 전역 파이썬 대신 FocusZ 고정
            # ──────────────────────────────────────────────────────────
            
            # Poetry 바이너리 경로
            export PATH="$HOME/.poetry/bin:$HOME/.local/bin:$PATH"
            
            # 환경변수 로드 (.env는 DB·S3 자격증명만 포함)
            set -o allexport
            source .env
            set +o allexport
            
            git pull origin dev
            poetry install          # FocusZ site-packages에만 설치
            poetry run python manage.py migrate
            poetry run python manage.py collectstatic --noinput
            
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx

  deploy-live:
    # main 브랜치로 머지되었을 때만 실행
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    name: Deploy to AWS Prod EC2
    runs-on: ubuntu-latest

    steps:
      - name: SSH to Live Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIVE_AWS_HOST }}
          username: ${{ secrets.LIVE_AWS_USER }}
          key: ${{ secrets.LIVE_AWS_SSH_KEY }}
          script: |
            set -e
            cd ~/backend
            
            # ── FocusZ 가상환경만 쓰도록 고정 ─────────────────────────
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            pyenv activate FocusZ      # ← 핵심: 전역 파이썬 대신 FocusZ 고정
            # ──────────────────────────────────────────────────────────
            
            # Poetry 바이너리 경로
            export PATH="$HOME/.poetry/bin:$HOME/.local/bin:$PATH"
            
            # 환경변수 로드 (.env는 DB·S3 자격증명만 포함)
            set -o allexport
            source .env
            set +o allexport
            
            git pull origin dev
            poetry install          # FocusZ site-packages에만 설치
            poetry run python manage.py migrate
            poetry run python manage.py collectstatic --noinput
            
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx
